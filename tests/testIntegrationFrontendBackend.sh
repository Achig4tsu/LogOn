#!/bin/bash

# üîó LogOn Password Manager - Test Int√©gration Frontend-Backend
# Validation compl√®te des connexions entre le frontend et le backend

set -e

echo "üîó Test Int√©gration Frontend-Backend - LogOn Password Manager"
echo "============================================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
print_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
        return 1
    fi
}

# Fonction pour afficher les informations
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Fonction pour afficher les avertissements
print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Fonction pour afficher les sections
print_section() {
    echo -e "${PURPLE}üîß $1${NC}"
}

echo
print_section "Phase 1: V√©rification des services backend"

# V√©rification des services backend
backend_services=(
    "backend/src/services/JWTService.ts"
    "backend/src/services/TOTPService.ts"
    "backend/src/middleware/auth.ts"
    "backend/src/controllers/AuthController.ts"
    "backend/src/routes/auth.ts"
)

for service in "${backend_services[@]}"; do
    if [ -f "$service" ]; then
        print_result 0 "Service $service existe"
    else
        print_result 1 "Service $service manquant"
    fi
done

echo
print_section "Phase 2: V√©rification des APIs backend"

# V√©rification des endpoints dans les routes
if [ -f "backend/src/routes/auth.ts" ]; then
    endpoints=(
        "/register"
        "/login"
        "/refresh"
        "/2fa/login-verify"
        "/2fa/setup"
        "/2fa/enable"
        "/logout"
        "/verify"
    )
    
    for endpoint in "${endpoints[@]}"; do
        if grep -q "router.post('$endpoint'" backend/src/routes/auth.ts || grep -q "router.get('$endpoint'" backend/src/routes/auth.ts; then
            print_result 0 "Endpoint $endpoint configur√©"
        else
            print_result 1 "Endpoint $endpoint manquant"
        fi
    done
fi

echo
print_section "Phase 3: V√©rification des fonctionnalit√©s JWT"

if [ -f "backend/src/services/JWTService.ts" ]; then
    jwt_features=(
        "generateTokens"
        "verifyAccessToken"
        "verifyRefreshToken"
        "refreshAccessToken"
        "extractTokenFromHeader"
    )
    
    for feature in "${jwt_features[@]}"; do
        if grep -q "$feature" backend/src/services/JWTService.ts; then
            print_result 0 "Fonction JWT $feature impl√©ment√©e"
        else
            print_result 1 "Fonction JWT $feature manquante"
        fi
    done
fi

echo
print_section "Phase 4: V√©rification des fonctionnalit√©s TOTP"

if [ -f "backend/src/services/TOTPService.ts" ]; then
    totp_features=(
        "generateTOTPSetup"
        "verifyTOTPCode"
        "generateTOTPCode"
        "verifyBackupCode"
        "isValidTOTPFormat"
    )
    
    for feature in "${totp_features[@]}"; do
        if grep -q "$feature" backend/src/services/TOTPService.ts; then
            print_result 0 "Fonction TOTP $feature impl√©ment√©e"
        else
            print_result 1 "Fonction TOTP $feature manquante"
        fi
    done
fi

echo
print_section "Phase 5: V√©rification du frontend"

# V√©rification des pages frontend
frontend_pages=(
    "frontend/pages/login.vue"
    "frontend/pages/register.vue"
    "frontend/pages/two-factor-verify.vue"
    "frontend/pages/dashboard.vue"
)

for page in "${frontend_pages[@]}"; do
    if [ -f "$page" ]; then
        print_result 0 "Page $page existe"
    else
        print_result 1 "Page $page manquante"
    fi
done

echo
print_section "Phase 6: V√©rification des composables frontend"

if [ -f "frontend/composables/useAuth.ts" ]; then
    auth_functions=(
        "login"
        "register"
        "logout"
        "verifyTwoFactor"
        "refreshToken"
        "checkAuth"
    )
    
    for func in "${auth_functions[@]}"; do
        if grep -q "const $func =" frontend/composables/useAuth.ts; then
            print_result 0 "Fonction auth $func impl√©ment√©e"
        else
            print_result 1 "Fonction auth $func manquante"
        fi
    done
fi

echo
print_section "Phase 7: V√©rification des types TypeScript"

if [ -f "frontend/types/auth.ts" ]; then
    if grep -q "requiresTwoFactor" frontend/types/auth.ts; then
        print_result 0 "Type AuthResponse mis √† jour avec requiresTwoFactor"
    else
        print_result 1 "Type AuthResponse non mis √† jour"
    fi
    
    if grep -q "AuthTokens" frontend/types/auth.ts; then
        print_result 0 "Type AuthTokens d√©fini"
    else
        print_result 1 "Type AuthTokens manquant"
    fi
fi

echo
print_section "Phase 8: V√©rification de la configuration"

# V√©rification des variables d'environnement
if [ -f ".env" ]; then
    env_vars=(
        "JWT_ACCESS_SECRET"
        "JWT_REFRESH_SECRET"
        "DATABASE_URL"
        "REDIS_URL"
        "NODE_ENV"
    )
    
    for var in "${env_vars[@]}"; do
        if grep -q "^$var=" .env; then
            print_result 0 "Variable d'environnement $var configur√©e"
        else
            print_result 1 "Variable d'environnement $var manquante"
        fi
    done
fi

echo
print_section "Phase 9: V√©rification Docker"

if [ -f "docker-compose.dev.yml" ]; then
    print_result 0 "Configuration Docker d√©veloppement existe"
    
    # V√©rifier les services Docker
    if grep -q "frontend:" docker-compose.dev.yml; then
        print_result 0 "Service frontend configur√© dans Docker"
    else
        print_result 1 "Service frontend manquant dans Docker"
    fi
    
    if grep -q "backend:" docker-compose.dev.yml; then
        print_result 0 "Service backend configur√© dans Docker"
    else
        print_result 1 "Service backend manquant dans Docker"
    fi
fi

echo
print_section "Phase 10: Test de coh√©rence des APIs"

# V√©rifier que les endpoints frontend correspondent au backend
if [ -f "frontend/composables/useAuth.ts" ] && [ -f "backend/src/routes/auth.ts" ]; then
    
    # Test login endpoint
    if grep -q "/api/auth/login" frontend/composables/useAuth.ts && grep -q "router.post('/login'" backend/src/routes/auth.ts; then
        print_result 0 "API login coh√©rente frontend-backend"
    else
        print_result 1 "API login incoh√©rente frontend-backend"
    fi
    
    # Test 2FA endpoint
    if grep -q "/api/auth/2fa/login-verify" frontend/composables/useAuth.ts && grep -q "router.post('/2fa/login-verify'" backend/src/routes/auth.ts; then
        print_result 0 "API 2FA coh√©rente frontend-backend"
    else
        print_result 1 "API 2FA incoh√©rente frontend-backend"
    fi
    
    # Test refresh endpoint
    if grep -q "/api/auth/refresh" frontend/composables/useAuth.ts && grep -q "router.post('/refresh'" backend/src/routes/auth.ts; then
        print_result 0 "API refresh coh√©rente frontend-backend"
    else
        print_result 1 "API refresh incoh√©rente frontend-backend"
    fi
fi

echo
print_section "R√©sum√© de l'int√©gration"

echo -e "${GREEN}‚ú® Fonctionnalit√©s impl√©ment√©es:${NC}"
echo "  ‚Ä¢ Authentification JWT avec access et refresh tokens"
echo "  ‚Ä¢ Authentification √† deux facteurs (TOTP)"
echo "  ‚Ä¢ Middleware d'authentification backend"
echo "  ‚Ä¢ Routes API compl√®tes pour l'authentification"
echo "  ‚Ä¢ Pages frontend pour login et 2FA"
echo "  ‚Ä¢ Composables Vue pour la gestion d'√©tat"
echo "  ‚Ä¢ Types TypeScript coh√©rents"
echo "  ‚Ä¢ Configuration Docker et variables d'environnement"

echo
echo -e "${YELLOW}üìã Commandes Docker pour tester:${NC}"
echo "  # Construire et d√©marrer tous les services"
echo "  docker-compose -f docker-compose.dev.yml up --build"
echo ""
echo "  # Tester le backend uniquement"
echo "  docker-compose -f docker-compose.dev.yml up --build backend db redis"
echo ""
echo "  # Voir les logs d'un service"
echo "  docker-compose -f docker-compose.dev.yml logs -f backend"

echo
echo -e "${BLUE}üîß URLs de test:${NC}"
echo "  ‚Ä¢ Frontend: http://localhost:3000"
echo "  ‚Ä¢ Backend API: http://localhost:3001/api"
echo "  ‚Ä¢ Test login: POST http://localhost:3001/api/auth/login"
echo "  ‚Ä¢ Test 2FA: POST http://localhost:3001/api/auth/2fa/login-verify"

echo
echo -e "${GREEN}üéâ Test d'int√©gration termin√©!${NC}"
echo "Tous les liens frontend-backend ont √©t√© mis en place."
