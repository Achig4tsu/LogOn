#!/bin/bash
# üöÄ LogOn Password Manager - Phase 4 Tests
# Tests de connexion frontend-backend et corrections d'interface

set -e

# Configuration
PROJECT_ROOT="/home/k4lips0/Desktop/Dev/LogOn"
FRONTEND_DIR="$PROJECT_ROOT/frontend"
BACKEND_DIR="$PROJECT_ROOT/backend"
TESTS_DIR="$PROJECT_ROOT/tests"

echo "üöÄ Phase 4 : Test de connexion frontend-backend"
echo "=============================================="

# Fonction de test avec emoji
test_step() {
    echo ""
    echo "üîç $1"
    echo "---"
}

# Fonction de validation
validate_success() {
    if [ $? -eq 0 ]; then
        echo "‚úÖ $1 : SUCC√àS"
    else
        echo "‚ùå $1 : √âCHEC"
        exit 1
    fi
}

# Test 1: V√©rification de l'√©tat des services Docker
test_step "V√©rification de l'√©tat des services Docker"
cd "$PROJECT_ROOT"

docker-compose ps | grep -q "logon-backend.*Up" && echo "‚úì Backend en cours d'ex√©cution"
docker-compose ps | grep -q "logon-frontend.*Up" && echo "‚úì Frontend en cours d'ex√©cution"
docker-compose ps | grep -q "logon-db.*Up" && echo "‚úì Base de donn√©es en cours d'ex√©cution"
docker-compose ps | grep -q "logon-redis.*Up" && echo "‚úì Redis en cours d'ex√©cution"

validate_success "Services Docker"

# Test 2: Test de connectivit√© API backend
test_step "Test de connectivit√© API backend"

# Test du health endpoint
if curl -s --max-time 10 "http://localhost:3001/health" > /dev/null 2>&1; then
    echo "‚úì Backend API accessible sur le port 3001"
else
    echo "‚ùå Backend API non accessible"
    exit 1
fi

# Test du endpoint API principal
if curl -s --max-time 10 "http://localhost:3001/api" > /dev/null 2>&1; then
    echo "‚úì Endpoint API principal accessible"
else
    echo "‚ùå Endpoint API principal non accessible"
    exit 1
fi

validate_success "Connectivit√© API backend"

# Test 3: Test de connectivit√© frontend
test_step "Test de connectivit√© frontend"

if curl -s --max-time 10 "http://localhost:3000" > /dev/null 2>&1; then
    echo "‚úì Frontend Nuxt accessible sur le port 3000"
else
    echo "‚ùå Frontend Nuxt non accessible"
    exit 1
fi

validate_success "Connectivit√© frontend"

# Test 4: V√©rification des corrections de th√®me
test_step "V√©rification des corrections de th√®me"

# V√©rifier que le th√®me sombre est vraiment noir
if grep -q "background: 0 0% 5%" "$FRONTEND_DIR/assets/css/main.css"; then
    echo "‚úì Th√®me sombre configur√© en noir"
else
    echo "‚ùå Th√®me sombre non configur√© correctement"
    exit 1
fi

# V√©rifier les styles de boutons
if grep -q "cursor: pointer" "$FRONTEND_DIR/assets/css/main.css"; then
    echo "‚úì Curseur pointer configur√© pour les boutons"
else
    echo "‚ùå Curseur pointer non configur√©"
    exit 1
fi

validate_success "Corrections de th√®me"

# Test 5: V√©rification des pages corrig√©es
test_step "V√©rification des pages corrig√©es"

pages_to_check=(
    "$FRONTEND_DIR/pages/index.vue"
    "$FRONTEND_DIR/pages/login.vue"
    "$FRONTEND_DIR/pages/register.vue"
    "$FRONTEND_DIR/pages/forgot-password.vue"
)

for page in "${pages_to_check[@]}"; do
    if [ -f "$page" ]; then
        # V√©rifier que la page utilise les nouveaux styles
        if grep -q "btn-bordered\|Card\|CardContent" "$page"; then
            echo "‚úì $(basename "$page") mise √† jour avec les nouveaux styles"
        else
            echo "‚ö†Ô∏è $(basename "$page") pourrait n√©cessiter des mises √† jour de style"
        fi
    else
        echo "‚ùå $(basename "$page") manquant"
        exit 1
    fi
done

validate_success "Pages corrig√©es"

# Test 6: Test de compilation frontend
test_step "Test de compilation frontend"
cd "$FRONTEND_DIR"

echo "üîÑ Compilation du frontend..."
if npm run build > /tmp/frontend_build.log 2>&1; then
    echo "‚úì Compilation frontend r√©ussie"
else
    echo "‚ùå Erreur de compilation frontend"
    echo "Logs d'erreur :"
    tail -20 /tmp/frontend_build.log
    exit 1
fi

validate_success "Compilation frontend"

# Test 7: Test de la fonctionnalit√© crypto c√¥t√© client
test_step "Test de la fonctionnalit√© crypto c√¥t√© client"

# V√©rifier que les fonctions crypto sont prot√©g√©es c√¥t√© client
if grep -q "typeof window === 'undefined'" "$FRONTEND_DIR/lib/crypto.ts"; then
    echo "‚úì Protection SSR ajout√©e aux fonctions crypto"
else
    echo "‚ùå Protection SSR manquante dans crypto.ts"
    exit 1
fi

if grep -q "typeof window === 'undefined'" "$FRONTEND_DIR/composables/useAuth.ts"; then
    echo "‚úì Protection SSR ajout√©e au composable auth"
else
    echo "‚ùå Protection SSR manquante dans useAuth.ts"
    exit 1
fi

validate_success "Fonctionnalit√© crypto c√¥t√© client"

# Test 8: Test de configuration color-mode
test_step "Test de configuration color-mode"

if grep -q "colorMode:" "$FRONTEND_DIR/nuxt.config.ts"; then
    echo "‚úì Configuration color-mode ajout√©e"
else
    echo "‚ùå Configuration color-mode manquante"
    exit 1
fi

validate_success "Configuration color-mode"

# Test 9: Test de connectivit√© base de donn√©es
test_step "Test de connectivit√© base de donn√©es"

# Test de la base de donn√©es via l'API backend
if curl -s --max-time 10 "http://localhost:3001/api/auth/salt" \
   -H "Content-Type: application/json" \
   -d '{"identifier":"test@example.com"}' > /dev/null 2>&1; then
    echo "‚úì Connexion base de donn√©es via API test√©e"
else
    echo "‚ö†Ô∏è Test de base de donn√©es non concluant (normal si pas de donn√©es de test)"
fi

validate_success "Test de connectivit√© base de donn√©es"

# Test 10: Test des routes API principales
test_step "Test des routes API principales"

api_routes=(
    "/api/auth/salt"
    "/api/auth/register"
    "/api/auth/login"
    "/api/entries"
    "/api/groups"
)

for route in "${api_routes[@]}"; do
    if curl -s --max-time 5 "http://localhost:3001$route" > /dev/null 2>&1; then
        echo "‚úì Route $route accessible"
    else
        echo "‚ö†Ô∏è Route $route non accessible (normal sans authentification)"
    fi
done

validate_success "Routes API principales"

# R√©sultats finaux
echo ""
echo "üéâ PHASE 4 TEST√âE AVEC SUCC√àS !"
echo "==============================="
echo "‚úÖ Services Docker op√©rationnels"
echo "‚úÖ Connectivit√© frontend-backend √©tablie"
echo "‚úÖ Th√®me sombre noir configur√©"
echo "‚úÖ Styles de boutons am√©lior√©s"
echo "‚úÖ Protection SSR crypto ajout√©e"
echo "‚úÖ Configuration color-mode fonctionnelle"
echo "‚úÖ Pages principales corrig√©es"
echo "‚úÖ Compilation frontend r√©ussie"
echo ""
echo "üìã Corrections apport√©es :"
echo "   ‚Ä¢ Erreur crypto deriveKeys corrig√©e (protection SSR)"
echo "   ‚Ä¢ Th√®me sombre noir au lieu de bleu"
echo "   ‚Ä¢ Curseur pointer sur les boutons"
echo "   ‚Ä¢ Bordures visibles sur les formulaires"
echo "   ‚Ä¢ Page index coh√©rente avec le design"
echo "   ‚Ä¢ Page forgot-password cr√©√©e"
echo "   ‚Ä¢ Configuration color-mode am√©lior√©e"
echo ""
echo "üìã Prochaines √©tapes :"
echo "   ‚Ä¢ Finaliser la page register avec tabs"
echo "   ‚Ä¢ Tester l'inscription/connexion end-to-end"
echo "   ‚Ä¢ V√©rifier le fonctionnement des composables"
echo "   ‚Ä¢ Tests d'int√©gration complets"
echo ""
echo "üåê URLs disponibles :"
echo "   Frontend: http://localhost:3000"
echo "   Backend API: http://localhost:3001"
echo "   Health Check: http://localhost:3001/health"

rm -f /tmp/frontend_build.log
